//@version=6
strategy("VWMA Strategy (Long/Short/Both)", overlay=true, 
         shorttitle="VWMA", 
         initial_capital=10000, 
         default_qty_type=strategy.percent_of_equity, 
         default_qty_value=100,
         commission_type=strategy.commission.percent,
         commission_value=0.1)

// Strategy Mode Selection
strategyMode = input.string("Both", "Strategy Mode", options=["Long Only", "Short Only", "Both"])

// VWMA Parameters
vwmaFastLength = input.int(20, "Fast VWMA Length", minval=10, maxval=30, group="VWMA Settings")
vwmaMediumLength = input.int(100, "Medium VWMA Length", minval=80, maxval=120, group="VWMA Settings")
vwmaSlowLength = input.int(300, "Slow VWMA Length", minval=280, maxval=320, group="VWMA Settings")

// Slope Parameters
slopeBars = input.int(3, "Slope Calculation Bars", minval=1, maxval=5, group="Slope Settings")
minSlopeSlowLong = input.float(0.0, "Min Slope for Long (degrees)", minval=-5.0, maxval=5.0, step=0.1, group="Slope Settings")
maxSlopeSlowShort = input.float(0.0, "Max Slope for Short (degrees)", minval=-5.0, maxval=5.0, step=0.1, group="Slope Settings")

// Risk Management
stopLossPercent = input.float(8.0, "Stop Loss %", minval=0.1, maxval=20.0, step=0.1, group="Risk Management")
useSLTP = input.bool(true, "Use Stop Loss", group="Risk Management")

// Display Options
showVWMAs = input.bool(true, "Show VWMA Lines", group="Display")
showSignals = input.bool(true, "Show Entry/Exit Signals", group="Display")
showSlope = input.bool(true, "Show Slope Angle", group="Display")

// VWMA Calculation Function
vwma(src, length) =>
    sum = 0.0
    volSum = 0.0
    for i = 0 to length - 1
        sum := sum + src[i] * volume[i]
        volSum := volSum + volume[i]
    volSum != 0 ? sum / volSum : src

// Calculate VWMAs
vwmaFast = vwma(close, vwmaFastLength)
vwmaMedium = vwma(close, vwmaMediumLength)
vwmaSlow = vwma(close, vwmaSlowLength)

// Calculate Slope Angle in degrees
// slope = (current - previous) / bars
// angle = atan(slope) * 180 / pi
calculateSlopeAngle(ma, bars) =>
    slope = (ma - ma[bars]) / bars
    angle = math.atan(slope) * 180 / math.pi
    angle

vwmaSlowSlope = calculateSlopeAngle(vwmaSlow, slopeBars)

// Crossover/Crossunder Detection
crossoverSignal = ta.crossover(vwmaFast, vwmaMedium)
crossunderSignal = ta.crossunder(vwmaFast, vwmaMedium)

// Entry Conditions
longCondition = crossoverSignal and vwmaSlowSlope > minSlopeSlowLong and volume > 0
shortCondition = crossunderSignal and vwmaSlowSlope < maxSlopeSlowShort and volume > 0

// Exit Conditions
exitLongCondition = crossunderSignal
exitShortCondition = crossoverSignal

// Execute Strategy Based on Mode
if (strategyMode == "Long Only" or strategyMode == "Both")
    if (longCondition)
        strategy.entry("Long", strategy.long)
    if (exitLongCondition)
        strategy.close("Long")

if (strategyMode == "Short Only" or strategyMode == "Both")
    if (shortCondition)
        strategy.entry("Short", strategy.short)
    if (exitShortCondition)
        strategy.close("Short")

// Stop Loss Implementation
if (useSLTP)
    strategy.exit("SL Long", "Long", stop=strategy.position_avg_price * (1 - stopLossPercent/100))
    strategy.exit("SL Short", "Short", stop=strategy.position_avg_price * (1 + stopLossPercent/100))

// Plotting
// VWMA Lines
plot(showVWMAs ? vwmaFast : na, "Fast VWMA", color=color.green, linewidth=2)
plot(showVWMAs ? vwmaMedium : na, "Medium VWMA", color=color.blue, linewidth=2)
plot(showVWMAs ? vwmaSlow : na, "Slow VWMA", color=color.red, linewidth=2)

// Entry/Exit Signals
plotshape(showSignals and longCondition and (strategyMode == "Long Only" or strategyMode == "Both"), 
          title="Long Entry", location=location.belowbar, style=shape.triangleup, 
          size=size.small, color=color.green, text="L")
          
plotshape(showSignals and shortCondition and (strategyMode == "Short Only" or strategyMode == "Both"), 
          title="Short Entry", location=location.abovebar, style=shape.triangledown, 
          size=size.small, color=color.red, text="S")

plotshape(showSignals and exitLongCondition and strategy.position_size > 0, 
          title="Long Exit", location=location.abovebar, style=shape.xcross, 
          size=size.small, color=color.orange, text="X")
          
plotshape(showSignals and exitShortCondition and strategy.position_size < 0, 
          title="Short Exit", location=location.belowbar, style=shape.xcross, 
          size=size.small, color=color.orange, text="X")

// Background color for position
positionBgColor = strategy.position_size > 0 ? color.new(color.green, 90) : strategy.position_size < 0 ? color.new(color.red, 90) : na
bgcolor(positionBgColor)

// Slope Angle Display (as table)
if showSlope
    var table slopeTable = table.new(position.top_right, 1, 2)
    table.cell(slopeTable, 0, 0, "Slow VWMA Slope", text_color=color.white, bgcolor=color.gray)
    slopeColor = vwmaSlowSlope > 0 ? color.green : color.red
    table.cell(slopeTable, 0, 1, str.tostring(vwmaSlowSlope, "##.##") + "Â°", 
               text_color=color.white, bgcolor=slopeColor)

// Alert Conditions
alertcondition(longCondition and (strategyMode == "Long Only" or strategyMode == "Both"), 
               title="Long Entry Signal", 
               message="VWMA Long Entry: Fast crossed above Medium with positive slope")
               
alertcondition(shortCondition and (strategyMode == "Short Only" or strategyMode == "Both"), 
               title="Short Entry Signal", 
               message="VWMA Short Entry: Fast crossed below Medium with negative slope")
               
alertcondition(exitLongCondition and strategy.position_size > 0, 
               title="Long Exit Signal", 
               message="VWMA Long Exit: Fast crossed below Medium")
               
alertcondition(exitShortCondition and strategy.position_size < 0, 
               title="Short Exit Signal", 
               message="VWMA Short Exit: Fast crossed above Medium")

// Performance Stats Display
var table perfTable = table.new(position.bottom_right, 2, 5)
if barstate.islastconfirmedhistory
    table.cell(perfTable, 0, 0, "Metric", text_color=color.white, bgcolor=color.gray)
    table.cell(perfTable, 1, 0, "Value", text_color=color.white, bgcolor=color.gray)
    
    table.cell(perfTable, 0, 1, "Net Profit %", text_color=color.white, bgcolor=color.black)
    netProfitPct = strategy.netprofit / strategy.initial_capital * 100
    netProfitColor = netProfitPct > 0 ? color.green : color.red
    table.cell(perfTable, 1, 1, str.tostring(netProfitPct, "##.##") + "%", text_color=netProfitColor, bgcolor=color.black)
    
    table.cell(perfTable, 0, 2, "Total Trades", text_color=color.white, bgcolor=color.black)
    table.cell(perfTable, 1, 2, str.tostring(strategy.closedtrades), text_color=color.white, bgcolor=color.black)
    
    table.cell(perfTable, 0, 3, "Win Rate %", text_color=color.white, bgcolor=color.black)
    winRate = strategy.wintrades / strategy.closedtrades * 100
    winRateColor = winRate > 50 ? color.green : color.red
    table.cell(perfTable, 1, 3, str.tostring(winRate, "##.##") + "%", text_color=winRateColor, bgcolor=color.black)
    
    table.cell(perfTable, 0, 4, "Profit Factor", text_color=color.white, bgcolor=color.black)
    profitFactor = strategy.grossprofit / math.abs(strategy.grossloss)
    pfColor = profitFactor > 1 ? color.green : color.red
    table.cell(perfTable, 1, 4, str.tostring(profitFactor, "##.##"), text_color=pfColor, bgcolor=color.black)